diff -Nur ld64-241.9/Info-ld64.plist ld64-241.9-AnV/Info-ld64.plist
--- ld64-241.9/Info-ld64.plist	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/Info-ld64.plist	2014-12-02 19:36:52.000000000 +0100
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleName</key>
+	<string>ld64</string>
+	<key>CFBundleIdentifier</key>
+	<string>com.AnV.Software.apple.ld64</string>
+	<key>CFBundleVersion</key>
+	<string>2.5.6</string>
+	<key>CFBundleShortVersionString</key>
+	<string>256.3</string>
+	<key>CFBundleGetInfoString</key>
+	<string>ld64 project updated with AnV Software and other patches</string>
+	<key>CFBundleDisplayName</key>
+	<string>ld64</string>
+	<key>NSHumanReadableCopyright</key>
+	<string>Copyright (c) 1999-2013 Apple Computer, Inc., Copyright (c) 2014 AnV Software</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+</dict>
+</plist>
diff -Nur ld64-241.9/ld64.xcodeproj/project.pbxproj ld64-241.9-AnV/ld64.xcodeproj/project.pbxproj
--- ld64-241.9/ld64.xcodeproj/project.pbxproj	2014-11-04 00:58:03.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/project.pbxproj	2014-12-02 20:14:40.000000000 +0100
@@ -3,7 +3,7 @@
 	archiveVersion = 1;
 	classes = {
 	};
-	objectVersion = 42;
+	objectVersion = 46;
 	objects = {
 
 /* Begin PBXAggregateTarget section */
@@ -31,11 +31,13 @@
 				F9871A3413340B4600DB3F24 /* Platform install */,
 			);
 			dependencies = (
+				F9A3DE160ED76D9A00C590B9 /* PBXTargetDependency */,
 				F9B1A2690A3A568200DA8FAB /* PBXTargetDependency */,
 				F9B1A26B0A3A568400DA8FAB /* PBXTargetDependency */,
-				F9C12EEA0ED65765005BC69D /* PBXTargetDependency */,
 				F9B8135D0EC2620E00F94C13 /* PBXTargetDependency */,
-				F9A3DE160ED76D9A00C590B9 /* PBXTargetDependency */,
+				AB7F59D01A2E44D900BADF46 /* PBXTargetDependency */,
+				AB7F59CE1A2E44CA00BADF46 /* PBXTargetDependency */,
+				F9C12EEA0ED65765005BC69D /* PBXTargetDependency */,
 			);
 			name = all;
 			productName = all;
@@ -104,6 +106,20 @@
 /* End PBXBuildRule section */
 
 /* Begin PBXContainerItemProxy section */
+		AB7F59CD1A2E44CA00BADF46 /* PBXContainerItemProxy */ = {
+			isa = PBXContainerItemProxy;
+			containerPortal = F9023C3006D5A227001BBF46 /* Project object */;
+			proxyType = 1;
+			remoteGlobalIDString = F9EA72CA097454A6008B4F1D;
+			remoteInfo = machocheck;
+		};
+		AB7F59CF1A2E44D900BADF46 /* PBXContainerItemProxy */ = {
+			isa = PBXContainerItemProxy;
+			containerPortal = F9023C3006D5A227001BBF46 /* Project object */;
+			proxyType = 1;
+			remoteGlobalIDString = F971EED206D5ACF60041D381;
+			remoteInfo = ObjectDump;
+		};
 		F96904880A4333AC00B77D2A /* PBXContainerItemProxy */ = {
 			isa = PBXContainerItemProxy;
 			containerPortal = F9023C3006D5A227001BBF46 /* Project object */;
@@ -697,10 +713,11 @@
 		F9023C3006D5A227001BBF46 /* Project object */ = {
 			isa = PBXProject;
 			attributes = {
+				LastUpgradeCheck = 0610;
 				ORGANIZATIONNAME = "Apple Inc.";
 			};
 			buildConfigurationList = F933D92309291AC90083EAC8 /* Build configuration list for PBXProject "ld64" */;
-			compatibilityVersion = "Xcode 2.4";
+			compatibilityVersion = "Xcode 3.2";
 			developmentRegion = English;
 			hasScannedForEncodings = 0;
 			knownRegions = (
@@ -975,6 +992,16 @@
 /* End PBXSourcesBuildPhase section */
 
 /* Begin PBXTargetDependency section */
+		AB7F59CE1A2E44CA00BADF46 /* PBXTargetDependency */ = {
+			isa = PBXTargetDependency;
+			target = F9EA72CA097454A6008B4F1D /* machocheck */;
+			targetProxy = AB7F59CD1A2E44CA00BADF46 /* PBXContainerItemProxy */;
+		};
+		AB7F59D01A2E44D900BADF46 /* PBXTargetDependency */ = {
+			isa = PBXTargetDependency;
+			target = F971EED206D5ACF60041D381 /* ObjectDump */;
+			targetProxy = AB7F59CF1A2E44D900BADF46 /* PBXContainerItemProxy */;
+		};
 		F96904890A4333AC00B77D2A /* PBXTargetDependency */ = {
 			isa = PBXTargetDependency;
 			target = F9EC77ED0A2F85F6002A3E39 /* rebase */;
@@ -1036,15 +1063,13 @@
 		F933D91C09291AC90083EAC8 /* Debug */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
+				ARCHS = "$(ARCHS_STANDARD_64_BIT)";
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				CURRENT_PROJECT_VERSION = "$(RC_ProjectSourceVersion)";
 				DEAD_CODE_STRIPPING = YES;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_DYNAMIC_NO_PIC = YES;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
-				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = DEBUG;
 				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = NO;
@@ -1088,7 +1113,6 @@
 					"-Wl,-lazy_library,$(DT_TOOLCHAIN_DIR)/usr/lib/libLTO.dylib",
 					"-Wl,-exported_symbol,__mh_execute_header",
 				);
-				PREBINDING = NO;
 				PRODUCT_NAME = ld;
 				SECTORDER_FLAGS = "";
 				VERSIONING_SYSTEM = "apple-generic";
@@ -1099,14 +1123,12 @@
 		F933D91D09291AC90083EAC8 /* Release */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
+				ARCHS = "$(ARCHS_STANDARD_64_BIT)";
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				CURRENT_PROJECT_VERSION = "$(RC_ProjectSourceVersion)";
 				DEAD_CODE_STRIPPING = YES;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
-				GCC_DYNAMIC_NO_PIC = YES;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
-				GCC_OPTIMIZATION_LEVEL = s;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"$(GCC_PREPROCESSOR_DEFINITIONS_QUOTED_FOR_TARGET_1)",
 					NDEBUG,
@@ -1153,7 +1175,6 @@
 					"-Wl,-lazy_library,$(DT_TOOLCHAIN_DIR)/usr/lib/libLTO.dylib",
 					"-Wl,-exported_symbol,__mh_execute_header",
 				);
-				PREBINDING = NO;
 				PRODUCT_NAME = ld;
 				SECTORDER_FLAGS = "";
 				STRIP_INSTALLED_PRODUCT = YES;
@@ -1167,12 +1188,11 @@
 		F933D92009291AC90083EAC8 /* Debug */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
+				ARCHS = "$(ARCHS_STANDARD_64_BIT)";
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
-				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = NO;
 				GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
@@ -1196,7 +1216,6 @@
 					"-Wl,-lazy_library,$(DT_TOOLCHAIN_DIR)/usr/lib/libLTO.dylib",
 				);
 				OTHER_REZFLAGS = "";
-				PREBINDING = NO;
 				PRODUCT_NAME = ObjectDump;
 				SECTORDER_FLAGS = "";
 				WARNING_CFLAGS = (
@@ -1210,12 +1229,11 @@
 		F933D92109291AC90083EAC8 /* Release */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
+				ARCHS = "$(ARCHS_STANDARD_64_BIT)";
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = YES;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
-				GCC_OPTIMIZATION_LEVEL = s;
 				GCC_PREPROCESSOR_DEFINITIONS = NDEBUG;
 				HEADER_SEARCH_PATHS = (
 					"$(SRCROOT)/src/ld",
@@ -1231,7 +1249,6 @@
 					"-Wl,-lazy_library,$(DT_TOOLCHAIN_DIR)/usr/lib/libLTO.dylib",
 				);
 				OTHER_REZFLAGS = "";
-				PREBINDING = NO;
 				PRODUCT_NAME = ObjectDump;
 				WARNING_CFLAGS = (
 					"-Wmost",
@@ -1244,20 +1261,53 @@
 		F933D92409291AC90083EAC8 /* Debug */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
-				ARCHS = "$(ARCHS_STANDARD_64_BIT_PRE_XCODE_3_1)";
-				ARCHS_STANDARD_64_BIT_PRE_XCODE_3_1 = x86_64;
+				ARCHS = "$(ARCHS_STANDARD_32_64_BIT)";
+				CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES;
+				CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_ENABLE_MODULES = YES;
+				CURRENT_PROJECT_VERSION = 241.9;
+				DYLIB_COMPATIBILITY_VERSION = 236.3;
+				DYLIB_CURRENT_VERSION = 241.9;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
 				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
+				MACOSX_DEPLOYMENT_TARGET = 10.10;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = PrivateMacOSX10.10;
+				VERSIONING_SYSTEM = "apple-generic";
+				VERSION_INFO_BUILDER = "AnV Software";
+				VERSION_INFO_FILE = LD64_Vers.c;
 			};
 			name = Debug;
 		};
 		F933D92509291AC90083EAC8 /* Release */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
-				ARCHS = "$(ARCHS_STANDARD_64_BIT_PRE_XCODE_3_1)";
-				ARCHS_STANDARD_64_BIT_PRE_XCODE_3_1 = x86_64;
+				ARCHS = "$(ARCHS_STANDARD_32_64_BIT)";
+				CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES;
+				CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_ENABLE_MODULES = YES;
+				CURRENT_PROJECT_VERSION = 241.9;
+				DEAD_CODE_STRIPPING = YES;
+				DYLIB_COMPATIBILITY_VERSION = 236.3;
+				DYLIB_CURRENT_VERSION = 241.9;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
 				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_GENERATE_DEBUGGING_SYMBOLS = NO;
+				GCC_INLINES_ARE_PRIVATE_EXTERN = YES;
+				GCC_OPTIMIZATION_LEVEL = fast;
+				GCC_SYMBOLS_PRIVATE_EXTERN = YES;
 				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
+				GCC_UNROLL_LOOPS = YES;
+				LLVM_LTO = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.10;
+				SDKROOT = PrivateMacOSX10.10;
+				VERSIONING_SYSTEM = "apple-generic";
+				VERSION_INFO_BUILDER = "AnV Software";
+				VERSION_INFO_FILE = LD64_Vers.c;
 			};
 			name = Release;
 		};
@@ -1265,7 +1315,6 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COPY_PHASE_STRIP = NO;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				PRODUCT_NAME = "unit-tests";
 			};
 			name = Debug;
@@ -1274,7 +1323,6 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COPY_PHASE_STRIP = YES;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = NO;
 				PRODUCT_NAME = "unit-tests";
 			};
 			name = Release;
@@ -1282,10 +1330,23 @@
 		F9849FF810B5DE8E009E9878 /* Release-assert */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
-				ARCHS = "$(ARCHS_STANDARD_64_BIT_PRE_XCODE_3_1)";
-				ARCHS_STANDARD_64_BIT_PRE_XCODE_3_1 = x86_64;
+				ARCHS = "$(ARCHS_STANDARD_32_64_BIT)";
+				CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES;
+				CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_ENABLE_MODULES = YES;
+				CURRENT_PROJECT_VERSION = 241.9;
+				DYLIB_COMPATIBILITY_VERSION = 236.3;
+				DYLIB_CURRENT_VERSION = 241.9;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
 				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_OPTIMIZATION_LEVEL = fast;
 				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
+				MACOSX_DEPLOYMENT_TARGET = 10.10;
+				SDKROOT = PrivateMacOSX10.10;
+				VERSIONING_SYSTEM = "apple-generic";
+				VERSION_INFO_BUILDER = "AnV Software";
+				VERSION_INFO_FILE = LD64_Vers.c;
 			};
 			name = "Release-assert";
 		};
@@ -1294,7 +1355,6 @@
 			buildSettings = {
 				COPY_PHASE_STRIP = YES;
 				GCC_ENABLE_FIX_AND_CONTINUE = NO;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = NO;
 				PRODUCT_NAME = all;
 				ZERO_LINK = NO;
 			};
@@ -1303,14 +1363,12 @@
 		F9849FFA10B5DE8E009E9878 /* Release-assert */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
+				ARCHS = "$(ARCHS_STANDARD_64_BIT)";
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				CURRENT_PROJECT_VERSION = "$(RC_ProjectSourceVersion)";
 				DEAD_CODE_STRIPPING = YES;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
-				GCC_DYNAMIC_NO_PIC = YES;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
-				GCC_OPTIMIZATION_LEVEL = s;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"$(GCC_PREPROCESSOR_DEFINITIONS_QUOTED_FOR_TARGET_1)",
 					"$(GCC_PREPROCESSOR_DEFINITIONS_$(RC_RELEASE))",
@@ -1356,7 +1414,6 @@
 					"-Wl,-lazy_library,$(DT_TOOLCHAIN_DIR)/usr/lib/libLTO.dylib",
 					"-Wl,-exported_symbol,__mh_execute_header",
 				);
-				PREBINDING = NO;
 				PRODUCT_NAME = ld;
 				SECTORDER_FLAGS = "";
 				STRIP_INSTALLED_PRODUCT = YES;
@@ -1373,13 +1430,11 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
 				GCC_PREPROCESSOR_DEFINITIONS = "$(GCC_PREPROCESSOR_DEFINITIONS_$(RC_RELEASE))";
 				HEADER_SEARCH_PATHS = "";
 				INSTALL_PATH = /usr/bin;
 				OTHER_LDFLAGS = "-Wl,-exported_symbol,__mh_execute_header";
-				PREBINDING = NO;
 				PRODUCT_NAME = rebase;
 				STRIP_INSTALLED_PRODUCT = YES;
 				STRIP_STYLE = debugging;
@@ -1393,12 +1448,12 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
 				GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = NO;
 				GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;
 				HEADER_SEARCH_PATHS = "";
 				INSTALL_PATH = /usr/bin;
+				OTHER_CFLAGS = "-I/usr/include";
 				OTHER_CPLUSPLUSFLAGS = (
 					"-stdlib=libc++",
 					"$(OTHER_CFLAGS)",
@@ -1407,7 +1462,6 @@
 					"-stdlib=libc++",
 					"-Wl,-exported_symbol,__mh_execute_header",
 				);
-				PREBINDING = NO;
 				PRODUCT_NAME = unwinddump;
 				STRIP_INSTALLED_PRODUCT = YES;
 				STRIP_STYLE = debugging;
@@ -1417,12 +1471,11 @@
 		F9849FFD10B5DE8E009E9878 /* Release-assert */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
+				ARCHS = "$(ARCHS_STANDARD_64_BIT)";
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = YES;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
-				GCC_OPTIMIZATION_LEVEL = s;
 				GCC_PREPROCESSOR_DEFINITIONS = NDEBUG;
 				GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = NO;
 				HEADER_SEARCH_PATHS = (
@@ -1439,7 +1492,6 @@
 					"-Wl,-lazy_library,$(DT_TOOLCHAIN_DIR)/usr/lib/libLTO.dylib",
 				);
 				OTHER_REZFLAGS = "";
-				PREBINDING = NO;
 				PRODUCT_NAME = ObjectDump;
 				WARNING_CFLAGS = (
 					"-Wmost",
@@ -1455,7 +1507,6 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = YES;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
 				HEADER_SEARCH_PATHS = "";
 				INSTALL_PATH = "$(HOME)/bin";
@@ -1464,7 +1515,6 @@
 					"$(OTHER_CFLAGS)",
 				);
 				OTHER_LDFLAGS = "-stdlib=libc++";
-				PREBINDING = NO;
 				PRODUCT_NAME = machocheck;
 			};
 			name = "Release-assert";
@@ -1484,7 +1534,6 @@
 					"$(OTHER_CFLAGS)",
 				);
 				OTHER_LDFLAGS = "-stdlib=libc++";
-				PREBINDING = NO;
 				PRODUCT_NAME = dyldinfo;
 				STRIP_INSTALLED_PRODUCT = YES;
 				STRIP_STYLE = debugging;
@@ -1496,17 +1545,16 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
+				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
 				GCC_ENABLE_FIX_AND_CONTINUE = NO;
 				GCC_MODEL_TUNING = G5;
-				GCC_SYMBOLS_PRIVATE_EXTERN = YES;
 				INSTALL_PATH = /usr/local/lib;
 				OTHER_CPLUSPLUSFLAGS = (
 					"-stdlib=libc++",
 					"$(OTHER_CFLAGS)",
 				);
-				PREBINDING = NO;
 				PRODUCT_NAME = prunetrie;
 			};
 			name = "Release-assert";
@@ -1515,7 +1563,6 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COPY_PHASE_STRIP = YES;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = NO;
 				PRODUCT_NAME = "unit-tests";
 			};
 			name = "Release-assert";
@@ -1524,18 +1571,15 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
+				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
-				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
-				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_SYMBOLS_PRIVATE_EXTERN = YES;
 				GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
 				INSTALL_PATH = /usr/local/lib;
 				OTHER_CPLUSPLUSFLAGS = (
 					"-stdlib=libc++",
 					"$(OTHER_CFLAGS)",
 				);
-				PREBINDING = NO;
 				PRODUCT_NAME = prunetrie;
 			};
 			name = Debug;
@@ -1544,17 +1588,16 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
+				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
 				GCC_ENABLE_FIX_AND_CONTINUE = NO;
 				GCC_MODEL_TUNING = G5;
-				GCC_SYMBOLS_PRIVATE_EXTERN = YES;
 				INSTALL_PATH = /usr/local/lib;
 				OTHER_CPLUSPLUSFLAGS = (
 					"-stdlib=libc++",
 					"$(OTHER_CFLAGS)",
 				);
-				PREBINDING = NO;
 				PRODUCT_NAME = prunetrie;
 			};
 			name = Release;
@@ -1563,9 +1606,6 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COPY_PHASE_STRIP = NO;
-				GCC_DYNAMIC_NO_PIC = NO;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
-				GCC_OPTIMIZATION_LEVEL = 0;
 				PRODUCT_NAME = all;
 			};
 			name = Debug;
@@ -1575,7 +1615,6 @@
 			buildSettings = {
 				COPY_PHASE_STRIP = YES;
 				GCC_ENABLE_FIX_AND_CONTINUE = NO;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = NO;
 				PRODUCT_NAME = all;
 				ZERO_LINK = NO;
 			};
@@ -1587,18 +1626,16 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
-				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = NO;
 				GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;
 				INSTALL_PATH = "$(HOME)/bin";
+				OTHER_CFLAGS = "-I/usr/include";
 				OTHER_CPLUSPLUSFLAGS = (
 					"-stdlib=libc++",
 					"$(OTHER_CFLAGS)",
 				);
 				OTHER_LDFLAGS = "-stdlib=libc++";
-				PREBINDING = NO;
 				PRODUCT_NAME = unwinddump;
 			};
 			name = Debug;
@@ -1609,18 +1646,17 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
 				GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = NO;
 				GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;
 				HEADER_SEARCH_PATHS = "";
 				INSTALL_PATH = /usr/bin;
+				OTHER_CFLAGS = "-I/usr/include";
 				OTHER_CPLUSPLUSFLAGS = (
 					"-stdlib=libc++",
 					"$(OTHER_CFLAGS)",
 				);
 				OTHER_LDFLAGS = "-Wl,-exported_symbol,__mh_execute_header";
-				PREBINDING = NO;
 				PRODUCT_NAME = unwinddump;
 				STRIP_INSTALLED_PRODUCT = YES;
 				STRIP_STYLE = debugging;
@@ -1633,10 +1669,8 @@
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
-				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_ENABLE_FIX_AND_CONTINUE = NO;
 				GCC_MODEL_TUNING = G5;
-				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_CHECK_SWITCH_STATEMENTS = YES;
@@ -1653,7 +1687,6 @@
 					"$(OTHER_CFLAGS)",
 				);
 				OTHER_LDFLAGS = "-stdlib=libc++";
-				PREBINDING = NO;
 				PRODUCT_NAME = dyldinfo;
 				WARNING_CFLAGS = "-Wall";
 			};
@@ -1674,7 +1707,6 @@
 					"$(OTHER_CFLAGS)",
 				);
 				OTHER_LDFLAGS = "-stdlib=libc++";
-				PREBINDING = NO;
 				PRODUCT_NAME = dyldinfo;
 				STRIP_INSTALLED_PRODUCT = YES;
 				STRIP_STYLE = debugging;
@@ -1688,16 +1720,13 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
-				GCC_OPTIMIZATION_LEVEL = 0;
 				INSTALL_PATH = "$(HOME)/bin";
 				OTHER_CPLUSPLUSFLAGS = (
 					"-stdlib=libc++",
 					"$(OTHER_CFLAGS)",
 				);
 				OTHER_LDFLAGS = "-stdlib=libc++";
-				PREBINDING = NO;
 				PRODUCT_NAME = machocheck;
 			};
 			name = Debug;
@@ -1708,7 +1737,6 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = YES;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
 				HEADER_SEARCH_PATHS = "";
 				INSTALL_PATH = "$(HOME)/bin";
@@ -1717,7 +1745,6 @@
 					"$(OTHER_CFLAGS)",
 				);
 				OTHER_LDFLAGS = "-stdlib=libc++";
-				PREBINDING = NO;
 				PRODUCT_NAME = machocheck;
 			};
 			name = Release;
@@ -1728,12 +1755,9 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				GCC_DYNAMIC_NO_PIC = NO;
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				INSTALL_PATH = "$(HOME)/bin";
-				PREBINDING = NO;
 				PRODUCT_NAME = rebase;
 			};
 			name = Debug;
@@ -1744,13 +1768,11 @@
 				CLANG_CXX_LIBRARY = "libc++";
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
-				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
 				GCC_PREPROCESSOR_DEFINITIONS = "$(GCC_PREPROCESSOR_DEFINITIONS_$(RC_RELEASE))";
 				HEADER_SEARCH_PATHS = "";
 				INSTALL_PATH = /usr/bin;
 				OTHER_LDFLAGS = "-Wl,-exported_symbol,__mh_execute_header";
-				PREBINDING = NO;
 				PRODUCT_NAME = rebase;
 				STRIP_INSTALLED_PRODUCT = YES;
 				STRIP_STYLE = debugging;
diff -Nur ld64-241.9/ld64.xcodeproj/project.xcworkspace/contents.xcworkspacedata ld64-241.9-AnV/ld64.xcodeproj/project.xcworkspace/contents.xcworkspacedata
--- ld64-241.9/ld64.xcodeproj/project.xcworkspace/contents.xcworkspacedata	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/project.xcworkspace/contents.xcworkspacedata	2014-12-02 19:27:36.000000000 +0100
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:ld64.xcodeproj">
+   </FileRef>
+</Workspace>
diff -Nur ld64-241.9/ld64.xcodeproj/project.xcworkspace/xcuserdata/andyvand.xcuserdatad/WorkspaceSettings.xcsettings ld64-241.9-AnV/ld64.xcodeproj/project.xcworkspace/xcuserdata/andyvand.xcuserdatad/WorkspaceSettings.xcsettings
--- ld64-241.9/ld64.xcodeproj/project.xcworkspace/xcuserdata/andyvand.xcuserdatad/WorkspaceSettings.xcsettings	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/project.xcworkspace/xcuserdata/andyvand.xcuserdatad/WorkspaceSettings.xcsettings	2014-12-02 19:31:46.000000000 +0100
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>HasAskedToTakeAutomaticSnapshotBeforeSignificantChanges</key>
+	<true/>
+	<key>SnapshotAutomaticallyBeforeSignificantChanges</key>
+	<true/>
+</dict>
+</plist>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/ObjectDump.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/ObjectDump.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/ObjectDump.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/ObjectDump.xcscheme	2014-12-02 19:51:13.000000000 +0100
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F971EED206D5ACF60041D381"
+               BuildableName = "ObjectDump"
+               BlueprintName = "ObjectDump"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F971EED206D5ACF60041D381"
+            BuildableName = "ObjectDump"
+            BlueprintName = "ObjectDump"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F971EED206D5ACF60041D381"
+            BuildableName = "ObjectDump"
+            BlueprintName = "ObjectDump"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F971EED206D5ACF60041D381"
+            BuildableName = "ObjectDump"
+            BlueprintName = "ObjectDump"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/all.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/all.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/all.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/all.xcscheme	2014-12-02 19:52:01.000000000 +0100
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F9B1A2670A3A567B00DA8FAB"
+               BuildableName = "all"
+               BlueprintName = "all"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9B1A2670A3A567B00DA8FAB"
+            BuildableName = "all"
+            BlueprintName = "all"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9B1A2670A3A567B00DA8FAB"
+            BuildableName = "all"
+            BlueprintName = "all"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/dyldinfo.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/dyldinfo.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/dyldinfo.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/dyldinfo.xcscheme	2014-12-02 19:51:48.000000000 +0100
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F9BA51600ECE58BE00D1D62E"
+               BuildableName = "dyldinfo"
+               BlueprintName = "dyldinfo"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9BA51600ECE58BE00D1D62E"
+            BuildableName = "dyldinfo"
+            BlueprintName = "dyldinfo"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9BA51600ECE58BE00D1D62E"
+            BuildableName = "dyldinfo"
+            BlueprintName = "dyldinfo"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9BA51600ECE58BE00D1D62E"
+            BuildableName = "dyldinfo"
+            BlueprintName = "dyldinfo"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/ld.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/ld.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/ld.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/ld.xcscheme	2014-12-02 19:50:50.000000000 +0100
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F9023C3806D5A23E001BBF46"
+               BuildableName = "ld"
+               BlueprintName = "ld"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9023C3806D5A23E001BBF46"
+            BuildableName = "ld"
+            BlueprintName = "ld"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9023C3806D5A23E001BBF46"
+            BuildableName = "ld"
+            BlueprintName = "ld"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9023C3806D5A23E001BBF46"
+            BuildableName = "ld"
+            BlueprintName = "ld"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/libprunetrie.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/libprunetrie.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/libprunetrie.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/libprunetrie.xcscheme	2014-12-02 19:51:42.000000000 +0100
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F9A3DDC90ED762B700C590B9"
+               BuildableName = "libprunetrie.a"
+               BlueprintName = "libprunetrie"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9A3DDC90ED762B700C590B9"
+            BuildableName = "libprunetrie.a"
+            BlueprintName = "libprunetrie"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9A3DDC90ED762B700C590B9"
+            BuildableName = "libprunetrie.a"
+            BlueprintName = "libprunetrie"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/machocheck.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/machocheck.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/machocheck.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/machocheck.xcscheme	2014-12-02 19:51:28.000000000 +0100
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F9EA72CA097454A6008B4F1D"
+               BuildableName = "machocheck"
+               BlueprintName = "machocheck"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9EA72CA097454A6008B4F1D"
+            BuildableName = "machocheck"
+            BlueprintName = "machocheck"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9EA72CA097454A6008B4F1D"
+            BuildableName = "machocheck"
+            BlueprintName = "machocheck"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9EA72CA097454A6008B4F1D"
+            BuildableName = "machocheck"
+            BlueprintName = "machocheck"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/rebase.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/rebase.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/rebase.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/rebase.xcscheme	2014-12-02 19:50:57.000000000 +0100
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F9EC77ED0A2F85F6002A3E39"
+               BuildableName = "rebase"
+               BlueprintName = "rebase"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9EC77ED0A2F85F6002A3E39"
+            BuildableName = "rebase"
+            BlueprintName = "rebase"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9EC77ED0A2F85F6002A3E39"
+            BuildableName = "rebase"
+            BlueprintName = "rebase"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9EC77ED0A2F85F6002A3E39"
+            BuildableName = "rebase"
+            BlueprintName = "rebase"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/unit-tests.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/unit-tests.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/unit-tests.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/unit-tests.xcscheme	2014-12-02 19:51:56.000000000 +0100
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F96D5368094A2754008E9EE8"
+               BuildableName = "unit-tests"
+               BlueprintName = "unit-tests"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F96D5368094A2754008E9EE8"
+            BuildableName = "unit-tests"
+            BlueprintName = "unit-tests"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F96D5368094A2754008E9EE8"
+            BuildableName = "unit-tests"
+            BlueprintName = "unit-tests"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/unwinddump.xcscheme ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/unwinddump.xcscheme
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/unwinddump.xcscheme	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/unwinddump.xcscheme	2014-12-02 19:51:08.000000000 +0100
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0610"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "F9B670010DDA176100E6D0DA"
+               BuildableName = "unwinddump"
+               BlueprintName = "unwinddump"
+               ReferencedContainer = "container:ld64.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      buildConfiguration = "Debug">
+      <Testables>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9B670010DDA176100E6D0DA"
+            BuildableName = "unwinddump"
+            BlueprintName = "unwinddump"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </TestAction>
+   <LaunchAction
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9B670010DDA176100E6D0DA"
+            BuildableName = "unwinddump"
+            BlueprintName = "unwinddump"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      buildConfiguration = "Release"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "F9B670010DDA176100E6D0DA"
+            BuildableName = "unwinddump"
+            BlueprintName = "unwinddump"
+            ReferencedContainer = "container:ld64.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff -Nur ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/xcschememanagement.plist ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/xcschememanagement.plist
--- ld64-241.9/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/xcschememanagement.plist	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/ld64.xcodeproj/xcuserdata/andyvand.xcuserdatad/xcschemes/xcschememanagement.plist	2014-12-02 19:27:37.000000000 +0100
@@ -0,0 +1,102 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>SchemeUserState</key>
+	<dict>
+		<key>ObjectDump.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>4</integer>
+		</dict>
+		<key>all.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>0</integer>
+		</dict>
+		<key>dyldinfo.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>6</integer>
+		</dict>
+		<key>ld.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>1</integer>
+		</dict>
+		<key>libprunetrie.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>7</integer>
+		</dict>
+		<key>machocheck.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>5</integer>
+		</dict>
+		<key>rebase.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>2</integer>
+		</dict>
+		<key>unit-tests.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>8</integer>
+		</dict>
+		<key>unwinddump.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>3</integer>
+		</dict>
+	</dict>
+	<key>SuppressBuildableAutocreation</key>
+	<dict>
+		<key>F9023C3806D5A23E001BBF46</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+		<key>F96D5368094A2754008E9EE8</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+		<key>F971EED206D5ACF60041D381</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+		<key>F9A3DDC90ED762B700C590B9</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+		<key>F9B1A2670A3A567B00DA8FAB</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+		<key>F9B670010DDA176100E6D0DA</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+		<key>F9BA51600ECE58BE00D1D62E</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+		<key>F9EA72CA097454A6008B4F1D</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+		<key>F9EC77ED0A2F85F6002A3E39</key>
+		<dict>
+			<key>primary</key>
+			<true/>
+		</dict>
+	</dict>
+</dict>
+</plist>
diff -Nur ld64-241.9/src/abstraction/MachOFileAbstraction.hpp ld64-241.9-AnV/src/abstraction/MachOFileAbstraction.hpp
--- ld64-241.9/src/abstraction/MachOFileAbstraction.hpp	2014-11-04 00:30:51.000000000 +0100
+++ ld64-241.9-AnV/src/abstraction/MachOFileAbstraction.hpp	2014-12-02 19:38:35.000000000 +0100
@@ -254,9 +254,17 @@
 
 
 // hack until arm64 headers are worked out
+#ifndef CPU_TYPE_ARM64
 #define CPU_TYPE_ARM64			(CPU_TYPE_ARM | CPU_ARCH_ABI64)
+#endif
+
+#ifndef	CPU_SUBTYPE_ARM64_ALL
 #define CPU_SUBTYPE_ARM64_ALL	0
+#endif
+
+#ifndef  CPU_SUBTYPE_ARM64_V8
 #define CPU_SUBTYPE_ARM64_V8    1
+#endif
 
 #define ARM64_RELOC_UNSIGNED            0 // for pointers
 #define ARM64_RELOC_SUBTRACTOR          1 // must be followed by a ARM64_RELOC_UNSIGNED
@@ -1617,11 +1625,10 @@
 	pint_t			lsda() const							INLINE { return P::getP(_lsda); }
 	void			set_lsda(pint_t value)					INLINE { P::setP(_lsda, value);  }
 	
-	static uint32_t	codeStartFieldOffset()					INLINE { return offsetof(macho_compact_unwind_entry<P>,_codeStart); }
-	static uint32_t	personalityFieldOffset()				INLINE { return offsetof(macho_compact_unwind_entry<P>,_personality); }
-	static uint32_t	lsdaFieldOffset()						INLINE { return offsetof(macho_compact_unwind_entry<P>,_lsda); }
-	
-private:
+	uint32_t	codeStartFieldOffset()					INLINE { return offsetof(macho_compact_unwind_entry<P>,_codeStart); }
+	uint32_t	personalityFieldOffset()				INLINE { return offsetof(macho_compact_unwind_entry<P>,_personality); }
+	uint32_t	lsdaFieldOffset()						INLINE { return offsetof(macho_compact_unwind_entry<P>,_lsda); }
+
 	pint_t		_codeStart;
 	uint32_t	_codeLen;
 	uint32_t	_compactUnwindInfo;
diff -Nur ld64-241.9/src/configure.h ld64-241.9-AnV/src/configure.h
--- ld64-241.9/src/configure.h	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/src/configure.h	2014-12-02 19:37:05.000000000 +0100
@@ -0,0 +1,10 @@
+
+#define SUPPORT_ARCH_i386  1
+#define SUPPORT_ARCH_x86_64  1
+#define SUPPORT_ARCH_x86_64h  1
+#define SUPPORT_ARCH_armv6  1
+#define SUPPORT_ARCH_armv7  1
+#define SUPPORT_ARCH_armv7s  1
+#define SUPPORT_ARCH_armv7m  1
+#define SUPPORT_ARCH_arm64  1
+#define ALL_SUPPORTED_ARCHS  "i386 x86_64 x86_64h armv6 armv7 armv7s armv7m arm64"
diff -Nur ld64-241.9/src/ld/InputFiles.cpp ld64-241.9-AnV/src/ld/InputFiles.cpp
--- ld64-241.9/src/ld/InputFiles.cpp	2014-11-04 00:29:30.000000000 +0100
+++ ld64-241.9-AnV/src/ld/InputFiles.cpp	2014-12-02 19:37:05.000000000 +0100
@@ -798,7 +798,7 @@
 	// no thin .o files found, so default to same architecture this tool was built as
 	warning("-arch not specified");
 #if __i386__
-	opts.setArchitecture(CPU_TYPE_I386, CPU_SUBTYPE_X86_ALL);
+	opts.setArchitecture(CPU_TYPE_I386, CPU_SUBTYPE_I386_ALL);
 #elif __x86_64__
 	opts.setArchitecture(CPU_TYPE_X86_64, CPU_SUBTYPE_X86_64_ALL);
 #elif __arm__
diff -Nur ld64-241.9/src/ld/Options.cpp ld64-241.9-AnV/src/ld/Options.cpp
--- ld64-241.9/src/ld/Options.cpp	2014-11-04 00:25:08.000000000 +0100
+++ ld64-241.9-AnV/src/ld/Options.cpp	2014-12-02 19:53:55.000000000 +0100
@@ -51,7 +51,23 @@
 const int crashreporterBufferSize = 2000;
 static char crashreporterBuffer[crashreporterBufferSize];
 #if __MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
-	#include <CrashReporterClient.h>
+	//#include <CrashReporterClient.h>
+#define CRASHREPORTER_ANNOTATIONS_SECTION "__crash_info"
+#define CRASHREPORTER_ANNOTATIONS_VERSION 4
+
+#define CRSetCrashLogMessage(m) _crc_make_setter(message, m)
+#define _crc_make_setter(attr, arg) (gCRAnnotations.attr = (uint64_t)(unsigned long)(arg))
+
+	struct crashreporter_annotations_t {
+		uint64_t version;       // unsigned long
+		uint64_t message;       // char *
+		uint64_t signature_string;  // char *
+		uint64_t backtrace;     // char *
+		uint64_t message2;      // char *
+		uint64_t thread;        // uint64_t
+		uint64_t dialog_mode;       // unsigned int
+	};
+
 	// hack until ld does not need to build on 10.6 anymore
     struct crashreporter_annotations_t gCRAnnotations 
         __attribute__((section("__DATA," CRASHREPORTER_ANNOTATIONS_SECTION))) 
@@ -1761,7 +1777,7 @@
 	::close(fd);
 
 	// record section to create
-	ExtraSection info = { segment, section, path, (uint8_t*)p, stat_buf.st_size };
+	ExtraSection info = { segment, section, path, (uint8_t*)p, static_cast<uint64_t>(stat_buf.st_size) };
 	fExtraSections.push_back(info);
 }
 
diff -Nur ld64-241.9/src/ld/code-sign-blobs/memutils.h ld64-241.9-AnV/src/ld/code-sign-blobs/memutils.h
--- ld64-241.9/src/ld/code-sign-blobs/memutils.h	2014-09-11 00:24:46.000000000 +0200
+++ ld64-241.9-AnV/src/ld/code-sign-blobs/memutils.h	2014-12-02 20:01:04.000000000 +0100
@@ -28,7 +28,9 @@
 #ifndef _H_MEMUTILS
 #define _H_MEMUTILS
 
-//#include <security_utilities/utilities.h>
+#include <security_utilities/utilities.h>
+#include <unistd.h>
+#include <stdint.h>
 #include <sys/types.h>
 #include <stdlib.h>
 #include <algorithm>
@@ -51,7 +53,7 @@
 // Get the local alignment for a type, as used by the acting compiler.
 //
 template <class T>
-inline size_t alignof() { struct { char c; T t; } s; return sizeof(s) - sizeof(T); }
+inline size_t alignmentof() { struct { char c; T t; } s; return sizeof(s) - sizeof(T); }
 
 
 //
diff -Nur ld64-241.9/src/ld/parsers/libunwind/AddressSpace.hpp ld64-241.9-AnV/src/ld/parsers/libunwind/AddressSpace.hpp
--- ld64-241.9/src/ld/parsers/libunwind/AddressSpace.hpp	2014-09-11 00:24:46.000000000 +0200
+++ ld64-241.9-AnV/src/ld/parsers/libunwind/AddressSpace.hpp	2014-12-02 19:37:05.000000000 +0100
@@ -44,6 +44,16 @@
 #include "InternalMacros.h"
 #include "dwarf2.h"
 
+struct dyld_unwind_sections
+{
+    const struct mach_header*		mh;
+    const void*						dwarf_section;
+    uintptr_t						dwarf_section_length;
+    const void*						compact_unwind_section;
+    uintptr_t						compact_unwind_section_length;
+};
+
+extern bool _dyld_find_unwind_sections(void* addr, struct dyld_unwind_sections* info);
 
 #if 0
 #if __i386__ || __x86_64__ 
@@ -64,9 +74,9 @@
 #endif
 
 
-bool _dyld_find_unwind_sections(void* addr, dyld_unwind_sections* info)
+bool _dyld_find_unwind_sections(void* addr, struct dyld_unwind_sections* info)
 {
-    static void* (*p)(void*, dyld_unwind_sections*) = NULL;
+    static void* (*p)(void*, struct dyld_unwind_sections*) = NULL;
 
 	if(p == NULL)
 	    my_dyld_func_lookup("__dyld_find_unwind_sections", (void**)&p);
@@ -256,7 +266,7 @@
 
 inline bool LocalAddressSpace::findUnwindSections(pint_t addr, pint_t& mh, pint_t& dwarfStart, pint_t& dwarfLen, pint_t& compactStart)
 {
-	dyld_unwind_sections info;
+	struct dyld_unwind_sections info;
 	if ( _dyld_find_unwind_sections((void*)addr, &info) ) {
 		mh				= (pint_t)info.mh;
 		dwarfStart		= (pint_t)info.dwarf_section;
diff -Nur ld64-241.9/src/ld/parsers/libunwind/dyld_priv.h ld64-241.9-AnV/src/ld/parsers/libunwind/dyld_priv.h
--- ld64-241.9/src/ld/parsers/libunwind/dyld_priv.h	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/src/ld/parsers/libunwind/dyld_priv.h	2014-12-02 19:37:05.000000000 +0100
@@ -0,0 +1,282 @@
+/* -*- mode: C++; c-basic-offset: 4; tab-width: 4 -*-
+ *
+ * Copyright (c) 2003-2010 Apple Inc. All rights reserved.
+ *
+ * @APPLE_LICENSE_HEADER_START@
+ * 
+ * This file contains Original Code and/or Modifications of Original Code
+ * as defined in and that are subject to the Apple Public Source License
+ * Version 2.0 (the 'License'). You may not use this file except in
+ * compliance with the License. Please obtain a copy of the License at
+ * http://www.opensource.apple.com/apsl/ and read it before using this
+ * file.
+ * 
+ * The Original Code and all software distributed under the License are
+ * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
+ * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
+ * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
+ * Please see the License for the specific language governing rights and
+ * limitations under the License.
+ * 
+ * @APPLE_LICENSE_HEADER_END@
+ */
+#ifndef _MACH_O_DYLD_PRIV_H_
+#define _MACH_O_DYLD_PRIV_H_
+
+#include <stdbool.h>
+#include <Availability.h>
+#include <mach-o/dyld.h>
+#include <mach-o/dyld_images.h>
+
+#if __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+
+
+//
+// private interface between libSystem.dylib and dyld
+//
+extern int _dyld_func_lookup(const char* dyld_func_name, void **address);
+
+//
+// private interface between libSystem.dylib and dyld
+//
+extern void _dyld_fork_child();
+
+
+//
+// Possible state changes for which you can register to be notified
+//
+enum dyld_image_states
+{
+	dyld_image_state_mapped					= 10,		// No batch notification for this
+	dyld_image_state_dependents_mapped		= 20,		// Only batch notification for this
+	dyld_image_state_rebased				= 30, 
+	dyld_image_state_bound					= 40,
+	dyld_image_state_dependents_initialized	= 45,		// Only single notification for this
+	dyld_image_state_initialized			= 50,
+	dyld_image_state_terminated				= 60		// Only single notification for this
+};
+
+// 
+// Callback that provides a bottom-up array of images
+// For dyld_image_state_[dependents_]mapped state only, returning non-NULL will cause dyld to abort loading all those images
+// and append the returned string to its load failure error message. dyld does not free the string, so
+// it should be a literal string or a static buffer
+//
+typedef const char* (*dyld_image_state_change_handler)(enum dyld_image_states state, uint32_t infoCount, const struct dyld_image_info info[]);
+
+//
+// Register a handler to be called when any image changes to the requested state.
+// If 'batch' is true, the callback is called with an array of all images that are in the requested state sorted by dependency.
+// If 'batch' is false, the callback is called with one image at a time as each image transitions to the the requested state.
+// During the call to this function, the handler may be called back with existing images and the handler should
+// not return a string, since there is no load to abort.  In batch mode, existing images at or past the request
+// state supplied in the callback.  In non-batch mode, the callback is called for each image exactly in the
+// requested state.    
+//
+extern void
+dyld_register_image_state_change_handler(enum dyld_image_states state, bool batch, dyld_image_state_change_handler handler);
+
+
+//
+// Possible thread-local variable state changes for which you can register to be notified
+//
+enum dyld_tlv_states {
+    dyld_tlv_state_allocated = 10,   // TLV range newly allocated
+    dyld_tlv_state_deallocated = 20  // TLV range about to be deallocated
+};
+
+// 
+// Info about thread-local variable storage.
+// 
+typedef struct {
+    size_t info_size;    // sizeof(dyld_tlv_info)
+    void * tlv_addr;     // Base address of TLV storage
+    size_t tlv_size;     // Byte size of TLV storage
+} dyld_tlv_info;
+
+#if __BLOCKS__
+
+// 
+// Callback that notes changes to thread-local variable storage.
+// 
+typedef void (^dyld_tlv_state_change_handler)(enum dyld_tlv_states state, const dyld_tlv_info *info);
+
+//
+// Register a handler to be called when a thread adds or removes storage for thread-local variables.
+// The registered handler will only be called from and on behalf of the thread that owns the storage.
+// The registered handler will NOT be called for any storage that was 
+//   already allocated before dyld_register_tlv_state_change_handler() was 
+//   called. Use dyld_enumerate_tlv_storage() to get that information.
+// Exists in Mac OS X 10.7 and later 
+// 
+extern void 
+dyld_register_tlv_state_change_handler(enum dyld_tlv_states state, dyld_tlv_state_change_handler handler);
+
+// 
+// Enumerate the current thread-local variable storage allocated for the current thread. 
+// Exists in Mac OS X 10.7 and later 
+//
+extern void 
+dyld_enumerate_tlv_storage(dyld_tlv_state_change_handler handler);
+
+#endif
+
+
+//
+// get slide for a given loaded mach_header  
+// Mac OS X 10.6 and later
+//
+extern intptr_t _dyld_get_image_slide(const struct mach_header* mh);
+
+
+//
+// get pointer to this process's dyld_all_image_infos
+// Exists in Mac OS X 10.4 and later through _dyld_func_lookup()
+// Exists in Mac OS X 10.6 and later through libSystem.dylib
+//
+const struct dyld_all_image_infos* _dyld_get_all_image_infos();
+
+
+
+struct dyld_unwind_sections
+{
+	const struct mach_header*		mh;
+	const void*						dwarf_section;
+	uintptr_t						dwarf_section_length;
+	const void*						compact_unwind_section;
+	uintptr_t						compact_unwind_section_length;
+};
+
+
+//
+// Returns true iff some loaded mach-o image contains "addr".
+//	info->mh							mach header of image containing addr
+//  info->dwarf_section					pointer to start of __TEXT/__eh_frame section
+//  info->dwarf_section_length			length of __TEXT/__eh_frame section
+//  info->compact_unwind_section		pointer to start of __TEXT/__unwind_info section
+//  info->compact_unwind_section_length	length of __TEXT/__unwind_info section
+//
+// Exists in Mac OS X 10.6 and later 
+extern bool _dyld_find_unwind_sections(void* addr, struct dyld_unwind_sections* info);
+
+
+//
+// This is an optimized form of dladdr() that only returns the dli_fname field.
+//
+// Exists in Mac OS X 10.6 and later 
+extern const char* dyld_image_path_containing_address(const void* addr);
+
+
+
+// Convienence constants for return values from dyld_get_sdk_version() and friends.
+#define DYLD_MACOSX_VERSION_10_4		0x000A0400
+#define DYLD_MACOSX_VERSION_10_5		0x000A0500
+#define DYLD_MACOSX_VERSION_10_6		0x000A0600
+#define DYLD_MACOSX_VERSION_10_7		0x000A0700
+#define DYLD_MACOSX_VERSION_10_8		0x000A0800
+#define DYLD_MACOSX_VERSION_10_9		0x000A0900
+#define DYLD_MACOSX_VERSION_10_10		0x000A0A00
+
+#define DYLD_IOS_VERSION_2_0		0x00020000
+#define DYLD_IOS_VERSION_2_1		0x00020100
+#define DYLD_IOS_VERSION_2_2		0x00020200
+#define DYLD_IOS_VERSION_3_0		0x00030000
+#define DYLD_IOS_VERSION_3_1		0x00030100
+#define DYLD_IOS_VERSION_3_2		0x00030200
+#define DYLD_IOS_VERSION_4_0		0x00040000
+#define DYLD_IOS_VERSION_4_1		0x00040100
+#define DYLD_IOS_VERSION_4_2		0x00040200
+#define DYLD_IOS_VERSION_4_3		0x00040300
+#define DYLD_IOS_VERSION_5_0		0x00050000
+#define DYLD_IOS_VERSION_5_1		0x00050100
+#define DYLD_IOS_VERSION_6_0		0x00060000
+#define DYLD_IOS_VERSION_6_1		0x00060100
+#define DYLD_IOS_VERSION_7_0		0x00070000
+#define DYLD_IOS_VERSION_7_1		0x00070100
+#define DYLD_IOS_VERSION_8_0		0x00080000
+
+//
+// This is finds the SDK version a binary was built against.
+// Returns zero on error, or if SDK version could not be determined.
+//
+// Exists in Mac OS X 10.8 and later 
+// Exists in iOS 6.0 and later
+extern uint32_t dyld_get_sdk_version(const struct mach_header* mh);
+
+
+//
+// This is finds the SDK version the main executable was built against.
+// Returns zero on error, or if SDK version could not be determined.
+//
+// Exists in Mac OS X 10.8 and later 
+// Exists in iOS 6.0 and later
+extern uint32_t dyld_get_program_sdk_version();
+
+
+//
+// This is finds the min OS version a binary was built to run on.
+// Returns zero on error, or if no min OS recorded in binary.
+//
+// Exists in Mac OS X 10.8 and later 
+// Exists in iOS 6.0 and later
+extern uint32_t dyld_get_min_os_version(const struct mach_header* mh);
+
+
+//
+// This is finds the min OS version the main executable was built to run on.
+// Returns zero on error, or if no min OS recorded in binary.
+//
+// Exists in Mac OS X 10.8 and later 
+// Exists in iOS 6.0 and later
+extern uint32_t dyld_get_program_min_os_version();
+
+
+
+
+//
+// Returns if any OS dylib has overridden its copy in the shared cache
+//
+// Exists in iPhoneOS 3.1 and later 
+// Exists in Mac OS X 10.10 and later
+extern bool dyld_shared_cache_some_image_overridden();
+
+
+	
+//
+// Returns if the process is setuid or is code signed with entitlements.
+//
+// Exists in Mac OS X 10.9 and later
+extern bool dyld_process_is_restricted();
+
+
+//
+// <rdar://problem/13820686> for OpenGL to tell dyld it is ok to deallocate a memory based image when done.
+//
+// Exists in Mac OS X 10.9 and later
+#define NSLINKMODULE_OPTION_CAN_UNLOAD                  0x20
+
+
+//
+// Update all bindings on specified image. 
+// Looks for uses of 'replacement' and changes it to 'replacee'.
+// NOTE: this is less safe than using static interposing via DYLD_INSERT_LIBRARIES
+// because the running program may have already copy the pointer values to other
+// locations that dyld does not know about.
+//
+struct dyld_interpose_tuple {
+	const void* replacement;
+	const void* replacee;
+};
+extern void dyld_dynamic_interpose(const struct mach_header* mh, const struct dyld_interpose_tuple array[], size_t count);
+
+
+
+#if __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif /* _MACH_O_DYLD_PRIV_H_ */
diff -Nur ld64-241.9/src/ld/parsers/macho_dylib_file.cpp ld64-241.9-AnV/src/ld/parsers/macho_dylib_file.cpp
--- ld64-241.9/src/ld/parsers/macho_dylib_file.cpp	2014-09-11 00:24:46.000000000 +0200
+++ ld64-241.9-AnV/src/ld/parsers/macho_dylib_file.cpp	2014-12-02 19:37:05.000000000 +0100
@@ -1074,7 +1074,7 @@
 	}
 	if ( Parser<x86>::validFile(fileContent, false) ) {
 		*result = CPU_TYPE_I386;
-		*subResult = CPU_SUBTYPE_X86_ALL;
+		*subResult = CPU_SUBTYPE_I386_ALL;
 		return true;
 	}
 	if ( Parser<arm>::validFile(fileContent, false) ) {
diff -Nur ld64-241.9/src/ld/parsers/macho_relocatable_file.cpp ld64-241.9-AnV/src/ld/parsers/macho_relocatable_file.cpp
--- ld64-241.9/src/ld/parsers/macho_relocatable_file.cpp	2014-11-04 00:57:10.000000000 +0100
+++ ld64-241.9-AnV/src/ld/parsers/macho_relocatable_file.cpp	2014-12-02 19:42:12.000000000 +0100
@@ -1,4 +1,4 @@
-/* -*- mode: C++; c-basic-offset: 4; tab-width: 4 -*- 
+/* -*- mode: C++; c-basic-offset: 4; tab-width: 4 -*-
  *
  * Copyright (c) 2009-2010 Apple Inc. All rights reserved.
  *
@@ -4677,8 +4677,10 @@
 	else {
 		const pint_t* content = (pint_t*)(this->file().fileContent() + this->_machOSection->offset() + reloc->r_address());
 		pint_t personalityAddr = *content;
+#if 0
 		Section<arm64>* personalitySection = parser.sectionForAddress(personalityAddr);
 		assert((personalitySection->type() == ld::Section::typeCode) && "personality column in __compact_unwind section is not pointer to function");
+#endif
 		// atoms may not be constructed yet, so scan symbol table for labels
 		const char* name = parser.scanSymbolTableForAddress(personalityAddr);
 		return name;
@@ -4762,11 +4764,11 @@
 	for (const macho_relocation_info<P>* reloc = relocs; reloc < relocsEnd; ++reloc) {
 		if ( reloc->r_extern() ) {
 			// only expect external relocs on some colummns
-			if ( (reloc->r_address() % sizeof(macho_compact_unwind_entry<P>)) == macho_compact_unwind_entry<P>::personalityFieldOffset() ) {
+			if ( (reloc->r_address() % sizeof(macho_compact_unwind_entry<P>)) == offsetof(macho_compact_unwind_entry<P>,_personality) ) {
 				uint32_t entryIndex = reloc->r_address() / sizeof(macho_compact_unwind_entry<P>);
 				array[entryIndex].personality = this->personalityName(parser, reloc);
 			}
-			else if ( (reloc->r_address() % sizeof(macho_compact_unwind_entry<P>)) == macho_compact_unwind_entry<P>::lsdaFieldOffset() ) {
+			else if ( (reloc->r_address() % sizeof(macho_compact_unwind_entry<P>)) == offsetof(macho_compact_unwind_entry<P>,_lsda) ) {
 				uint32_t entryIndex = reloc->r_address() / sizeof(macho_compact_unwind_entry<P>);
 				const macho_nlist<P>& lsdaSym = parser.symbolFromIndex(reloc->r_symbolnum());
 				if ( (lsdaSym.n_type() & N_TYPE) == N_SECT ) 
@@ -4774,7 +4776,7 @@
 				else
 					warning("unexpected extern relocation to lsda in __compact_unwind section");
 			}
-			else if ( (reloc->r_address() % sizeof(macho_compact_unwind_entry<P>)) == macho_compact_unwind_entry<P>::codeStartFieldOffset() ) {
+			else if ( (reloc->r_address() % sizeof(macho_compact_unwind_entry<P>)) == offsetof(macho_compact_unwind_entry<P>,_codeStart) ) {
 				uint32_t entryIndex = reloc->r_address() / sizeof(macho_compact_unwind_entry<P>);
 				array[entryIndex].functionSymbolIndex = reloc->r_symbolnum();
 				array[entryIndex].functionStartAddress += parser.symbolFromIndex(reloc->r_symbolnum()).n_value();
@@ -4784,7 +4786,7 @@
 			}
 		}
 		else {
-			if ( (reloc->r_address() % sizeof(macho_compact_unwind_entry<P>)) == macho_compact_unwind_entry<P>::personalityFieldOffset() ) {
+			if ( (reloc->r_address() % sizeof(macho_compact_unwind_entry<P>)) == offsetof(macho_compact_unwind_entry<P>,_personality) ) {
 				uint32_t entryIndex = reloc->r_address() / sizeof(macho_compact_unwind_entry<P>);
 				array[entryIndex].personality = this->personalityName(parser, reloc);
 			}
@@ -7367,7 +7369,7 @@
 	}
 	if ( mach_o::relocatable::Parser<x86>::validFile(fileContent) ) {
 		*result = CPU_TYPE_I386;
-		*subResult = CPU_SUBTYPE_X86_ALL;
+		*subResult = CPU_SUBTYPE_I386_ALL;
 		return true;
 	}
 	if ( mach_o::relocatable::Parser<arm>::validFile(fileContent, false, 0) ) {
diff -Nur ld64-241.9/src/ld/passes/branch_island.cpp ld64-241.9-AnV/src/ld/passes/branch_island.cpp
--- ld64-241.9/src/ld/passes/branch_island.cpp	2014-09-11 00:24:46.000000000 +0200
+++ ld64-241.9-AnV/src/ld/passes/branch_island.cpp	2014-12-02 20:03:33.000000000 +0100
@@ -499,7 +499,7 @@
 				if ( target->section().type() == ld::Section::typeStub )
 					dstAddr = totalTextSize;
 				int64_t displacement = dstAddr - srcAddr;
-				TargetAndOffset finalTargetAndOffset = { target, addend };
+				TargetAndOffset finalTargetAndOffset = { target, static_cast<uint32_t>(addend) };
 				const int64_t kBranchLimit = kBetweenRegions;
 				if ( crossSectionBranch && ((displacement > kBranchLimit) || (displacement < (-kBranchLimit))) ) {
 					const ld::Atom* island;
diff -Nur ld64-241.9/src/ld/passes/compact_unwind.cpp ld64-241.9-AnV/src/ld/passes/compact_unwind.cpp
--- ld64-241.9/src/ld/passes/compact_unwind.cpp	2014-11-04 00:55:41.000000000 +0100
+++ ld64-241.9-AnV/src/ld/passes/compact_unwind.cpp	2014-12-02 19:37:05.000000000 +0100
@@ -901,19 +901,19 @@
 				symbolTableNotIn, false, false, false, ld::Atom::Alignment(log2(sizeof(pint_t)))),
 	_atom(funcAtom), _startOffset(startOffset), _len(len), _compactUnwindInfo(cui)
 {
-	_fixups.push_back(ld::Fixup(macho_compact_unwind_entry<P>::codeStartFieldOffset(), ld::Fixup::k1of3, ld::Fixup::kindSetTargetAddress, funcAtom));
-	_fixups.push_back(ld::Fixup(macho_compact_unwind_entry<P>::codeStartFieldOffset(), ld::Fixup::k2of3, ld::Fixup::kindAddAddend, _startOffset));
-	_fixups.push_back(ld::Fixup(macho_compact_unwind_entry<P>::codeStartFieldOffset(), ld::Fixup::k3of3, _s_pointerKind));
+	_fixups.push_back(ld::Fixup(offsetof(macho_compact_unwind_entry<P>,_codeStart), ld::Fixup::k1of3, ld::Fixup::kindSetTargetAddress, funcAtom));
+	_fixups.push_back(ld::Fixup(offsetof(macho_compact_unwind_entry<P>,_codeStart), ld::Fixup::k2of3, ld::Fixup::kindAddAddend, _startOffset));
+	_fixups.push_back(ld::Fixup(offsetof(macho_compact_unwind_entry<P>,_codeStart), ld::Fixup::k3of3, _s_pointerKind));
 	// see if atom has subordinate personality function or lsda
 	for (ld::Fixup::iterator fit = funcAtom->fixupsBegin(), end=funcAtom->fixupsEnd(); fit != end; ++fit) {
 		switch ( fit->kind ) {
 			case ld::Fixup::kindNoneGroupSubordinatePersonality:
 				assert(fit->binding == ld::Fixup::bindingsIndirectlyBound);
-				_fixups.push_back(ld::Fixup(macho_compact_unwind_entry<P>::personalityFieldOffset(), ld::Fixup::k1of1, _s_pointerStoreKind, state.indirectBindingTable[fit->u.bindingIndex]));
+				_fixups.push_back(ld::Fixup(offsetof(macho_compact_unwind_entry<P>,_personality), ld::Fixup::k1of1, _s_pointerStoreKind, state.indirectBindingTable[fit->u.bindingIndex]));
 				break;
 			case ld::Fixup::kindNoneGroupSubordinateLSDA:
 				assert(fit->binding == ld::Fixup::bindingDirectlyBound);
-				_fixups.push_back(ld::Fixup(macho_compact_unwind_entry<P>::lsdaFieldOffset(), ld::Fixup::k1of1, _s_pointerStoreKind, fit->u.target));
+				_fixups.push_back(ld::Fixup(offsetof(macho_compact_unwind_entry<P>,_lsda), ld::Fixup::k1of1, _s_pointerStoreKind, fit->u.target));
 				break;
 			default:
 				break;
diff -Nur ld64-241.9/src/other/ObjectDump.cpp ld64-241.9-AnV/src/other/ObjectDump.cpp
--- ld64-241.9/src/other/ObjectDump.cpp	2014-11-04 00:29:31.000000000 +0100
+++ ld64-241.9-AnV/src/other/ObjectDump.cpp	2014-12-02 20:09:42.000000000 +0100
@@ -32,8 +32,8 @@
 #include <mach-o/loader.h>
 
 #include "MachOFileAbstraction.hpp"
-#include "parsers/macho_relocatable_file.h"
-#include "parsers/lto_file.h"
+#include "../ld/parsers/macho_relocatable_file.h"
+#include "../ld/parsers/lto_file.h"
 
 static bool			sDumpContent= true;
 static bool			sDumpStabs	= false;
diff -Nur ld64-241.9/src/other/configure.h ld64-241.9-AnV/src/other/configure.h
--- ld64-241.9/src/other/configure.h	1970-01-01 01:00:00.000000000 +0100
+++ ld64-241.9-AnV/src/other/configure.h	2014-12-02 19:37:05.000000000 +0100
@@ -0,0 +1,10 @@
+
+#define SUPPORT_ARCH_i386  1
+#define SUPPORT_ARCH_x86_64  1
+#define SUPPORT_ARCH_x86_64h  1
+#define SUPPORT_ARCH_armv6  1
+#define SUPPORT_ARCH_armv7  1
+#define SUPPORT_ARCH_armv7s  1
+#define SUPPORT_ARCH_armv7m  1
+#define SUPPORT_ARCH_arm64  1
+#define ALL_SUPPORTED_ARCHS  "i386 x86_64 x86_64h armv6 armv7 armv7s armv7m arm64"
diff -Nur ld64-241.9/src/other/machochecker.cpp ld64-241.9-AnV/src/other/machochecker.cpp
--- ld64-241.9/src/other/machochecker.cpp	2014-09-11 00:24:46.000000000 +0200
+++ ld64-241.9-AnV/src/other/machochecker.cpp	2014-12-02 20:11:53.000000000 +0100
@@ -533,7 +533,7 @@
 				else {
 					throw "overlapping segment vm addresses";
 				}
-				segmentAddressRanges.push_back(std::make_pair<pint_t, pint_t>(startAddr, endAddr));
+				segmentAddressRanges.push_back(std::make_pair<pint_t, pint_t>((pint_t)startAddr, (pint_t)endAddr));
 			}
 			// see if this overlaps another segment file offset range
 			uint64_t startOffset = segCmd->fileoff();
@@ -550,7 +550,7 @@
 				else {
 					throw "overlapping segment file data";
 				}
-				segmentFileOffsetRanges.push_back(std::make_pair<pint_t, pint_t>(startOffset, endOffset));
+				segmentFileOffsetRanges.push_back(std::make_pair((pint_t)startOffset, (pint_t)endOffset));
 				// check is within file bounds
 				if ( (startOffset > fLength) || (endOffset > fLength) )
 					throw "segment file data is past end of file";
diff -Nur ld64-241.9/src/other/rebase.cpp ld64-241.9-AnV/src/other/rebase.cpp
--- ld64-241.9/src/other/rebase.cpp	2014-09-11 00:24:46.000000000 +0200
+++ ld64-241.9-AnV/src/other/rebase.cpp	2014-12-02 19:37:05.000000000 +0100
@@ -91,7 +91,14 @@
 	void										adjustSymbolTable();
 	void										adjustDATA();
 	void										doLocalRelocation(const macho_relocation_info<P>* reloc);
+
+#ifndef ORIGINAL_CODE
+	pint_t*
+	mappedAddressForVMAddress(uint64_t vmaddress);
+#else
 	pint_t*										mappedAddressForVMAddress(uint32_t vmaddress);
+#endif
+
 	void										rebaseAt(int segIndex, uint64_t offset, uint8_t type);
 	
 	const macho_header<P>*						fHeader;
@@ -226,8 +233,10 @@
 			break;
 		case MH_BUNDLE:
 			break;
+		case MH_DYLINKER:
+			break;
 		default:
-			throw "file is not a dylib or bundle";
+			throw "file is not a dylib, bundle or dylinker";
 	}
 		
 }
@@ -332,6 +341,35 @@
 					routines->set_init_address(routines->init_address() + fSlide);
 				}
 				break;
+			case LC_UNIXTHREAD:
+				{
+					struct macho_thread_command<P>* unixthread = (struct macho_thread_command<P>*)cmd;
+					uint32_t pc_reg = 0;
+					switch (this->getArchitecture())
+					{
+						case CPU_TYPE_I386:
+							pc_reg = 10;
+							break;
+						case CPU_TYPE_X86_64:
+							pc_reg = 16;
+							break;
+						case CPU_TYPE_ARM:
+						case CPU_TYPE_ARM64:
+							pc_reg = 15;
+							break;
+						case CPU_TYPE_POWERPC:
+						case CPU_TYPE_POWERPC64:
+							pc_reg = 0;
+							break;
+						default:
+							pc_reg = 0xffffffff;
+							break;
+					}
+					if (pc_reg != 0xffffffff) {
+						unixthread->set_thread_register(pc_reg, unixthread->thread_register(pc_reg) + fSlide);
+					}
+				}
+				break;
 			case macho_segment_command<P>::CMD:
 				// update segment commands
 				{
@@ -615,9 +653,13 @@
 	}
 }
 
-
+#ifndef ORIGINAL_CODE
+template <typename A>
+typename A::P::uint_t* Rebaser<A>::mappedAddressForVMAddress(uint64_t vmaddress)
+#else
 template <typename A>
 typename A::P::uint_t* Rebaser<A>::mappedAddressForVMAddress(uint32_t vmaddress)
+#endif
 {
 	for(typename std::vector<vmmap>::iterator it = fVMMApping.begin(); it != fVMMApping.end(); ++it) {
 		//fprintf(stderr, "vmaddr=0x%08lX, vmsize=0x%08lX\n", it->vmaddr, it->vmsize);
diff -Nur ld64-241.9/src/other/unwinddump.cpp ld64-241.9-AnV/src/other/unwinddump.cpp
--- ld64-241.9/src/other/unwinddump.cpp	2014-11-04 00:56:18.000000000 +0100
+++ ld64-241.9-AnV/src/other/unwinddump.cpp	2014-12-02 19:37:05.000000000 +0100
@@ -800,7 +800,7 @@
 		const char* functionNameStr;
 		pint_t funcAddress;
 		uint32_t offsetInFunction;
-		if ( hasExernReloc(((char*)entry-(char*)entriesStart)+macho_compact_unwind_entry<P>::codeStartFieldOffset(), &functionNameStr, &funcAddress) ) {
+		if ( hasExernReloc(((char*)entry-(char*)entriesStart)+offsetof(macho_compact_unwind_entry<P>,_codeStart), &functionNameStr, &funcAddress) ) {
 			offsetInFunction = entry->codeStart();
 		}
 		else {
@@ -819,7 +819,7 @@
 		printf("  unwind info:  0x%08X   %s\n", entry->compactUnwindInfo(), encodingString);
 		
 		const char* personalityNameStr;
-		if ( hasExernReloc(((char*)entry-(char*)entriesStart)+macho_compact_unwind_entry<P>::personalityFieldOffset(), &personalityNameStr) ) {
+		if ( hasExernReloc(((char*)entry-(char*)entriesStart)+offsetof(macho_compact_unwind_entry<P>,_personality), &personalityNameStr) ) {
 			printf("  personality:              %s\n", personalityNameStr);
 		}
 		else {
